import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

//buildscript {
//  repositories {
//    maven { url 'http://dl.bintray.com/jetbrains/intellij-plugin-service' }
//  }
//}

plugins {
    id "org.jetbrains.intellij" version "0.4.7"
    id 'jacoco'
    id 'org.unbroken-dome.test-sets' version '2.1.1'
//    id 'net.saliman.cobertura' version '2.3.1'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id "io.freefair.lombok" version "5.2.1"
}
//cobertura.coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report
//def buildTrigger = System.getenv('TRAVIS_EVENT_TYPE')
def enableIdeaGroovyPlugin=Boolean.valueOf(enableIdeaGroovyPlugin)
def groovyOn = enableIdeaGroovyPlugin ? 'enabled':'disabled'
def enableIdeaScalaPlugin=Boolean.valueOf(enableIdeaScalaPlugin)
def scalaOn = enableIdeaScalaPlugin ? 'enabled':'disabled'

println "*****************************************************************************************************************************************************************"
println "              Running build for ideaVersion: $ideaVersion and scalaPluginVersion: $scalaPluginVersion with Groovy plugin ${groovyOn} and Scala plugin ${scalaOn}"
println "*****************************************************************************************************************************************************************"

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.intellij'
apply plugin: "io.freefair.lombok"

def isRunInCI=Boolean.valueOf(System.getenv('CI'))
def spockVersion = ideaVersion.startsWith("14.") || ideaVersion.startsWith("15.")? "1.0-groovy-2.3" : "1.0-groovy-2.4"

jacoco {
//    toolVersion = "0.7.6.201602180812"
    toolVersion = "0.8.6"
}
allprojects{
    sourceCompatibility = jvmTargetVersion
    targetCompatibility = jvmTargetVersion
    repositories {
        mavenCentral()
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        if (!javaHome) {
            println "javaHome var not set. setting java home from JAVA_HOME env var"
            javaHome =  System.getenv().JAVA_HOME //            javaHome =  'C:\\Program Files\\AdoptOpenJDK\\jdk-13.0.2.8-hotspot'
        }
        println "JAVA_HOME=$javaHome"
//        options.bootClasspath = "$javaHome/jre/lib/rt.jar"
    }
    testSets {
        integrationTest
    }

    integrationTest {
        afterTest { desc, result ->
            println "Executing test [${desc.className}].${desc.name} with result: ${result.resultType}"
        }
        reports.html.enabled = !isRunInCI
    }
    tasks.withType(Test) {
        systemProperty 'enableIdeaGroovyPlugin', enableIdeaGroovyPlugin
        systemProperty 'enableIdeaScalaPlugin', enableIdeaScalaPlugin
        reports.html.destination = file("${reporting.baseDir}/${name}")
        testLogging {
            exceptionFormat = TestExceptionFormat.FULL
//            events TestLogEvent.FAILED, TestLogEvent.STANDARD_OUT, TestLogEvent.STANDARD_ERROR
            events TestLogEvent.values()
            showStandardStreams = true
        }
    }
    test {
        afterTest { desc, result ->
            println "Executing test [${desc.className}].${desc.name} with result: ${result.resultType}"
        }
        reports.html.enabled = !isRunInCI
    }
}

subprojects{
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: "io.freefair.lombok"
    dependencies {
        testCompile("org.spockframework:spock-core:$spockVersion"){
//            exclude group: 'org.codehaus.groovy'
        }
    }
}

def inspectedProjects = subprojects + rootProject
task jacocoMerge(type: JacocoMerge) {
    inspectedProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}
/*ref: https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacocoTestReport {
    reports {
        xml.enabled isRunInCI
        csv.enabled isRunInCI
        html{
            enabled !isRunInCI
            destination "${buildDir}/reports/jacoco"
        }
//        html.destination file("${buildDir}/jacocoHtml")
    }
}*/
task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn inspectedProjects.test, jacocoMerge

    additionalSourceDirs = files(inspectedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(inspectedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(inspectedProjects.sourceSets.main.output)
    executionData jacocoMerge.destinationFile

    reports {
        xml.enabled isRunInCI
        csv.enabled isRunInCI
        html{
            enabled !isRunInCI
            destination file("${buildDir}/reports/jacoco")
        }
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'com/weirddev/testme/intellij/ui/**')
        })
    }
}

def shouldInstrumentCode = !isRunInCI && !Boolean.valueOf(System.getProperty('skipCodeInstrumentation','false'))
def enabledPlugins = ['java','junit','properties']
if (enableIdeaGroovyPlugin) {
    enabledPlugins += 'Groovy'
}
if (enableIdeaScalaPlugin) {
    enabledPlugins += ('org.intellij.scala:' + scalaPluginVersion)
}
apply from: "$rootProject.projectDir/shared.gradle"
enabledPlugins = filterPlugins(enabledPlugins)

println(enabledPlugins)
intellij {
    pluginName 'TestMe'
    instrumentCode = shouldInstrumentCode
    version ideaVersion
    type ideaType
    downloadSources !isRunInCI
    sameSinceUntilBuild false
    updateSinceUntilBuild false
    plugins = enabledPlugins
    publishPlugin {
        token System.getenv("ORG_GRADLE_PROJECT_intellijPublishToken")
        channels = [ideaPublishChannel]
    }
}

idea {
    project {
        jdkName         = jvmTargetVersion
        languageLevel   = jvmTargetVersion
        vcs = 'Git'
    }
}

dependencies {
    compile(project(':testme-intellij-common')){
        exclude group:'com.jetbrains', module: 'ideaIC'
        exclude group:'org.jetbrains.plugins', module: 'junit'
        exclude group:'org.jetbrains.plugins', module: 'properties'
        exclude group:'org.jetbrains.plugins', module: 'Groovy'
    }
    compile(project(':testme-intellij-groovy')){
        exclude group:'com.jetbrains', module: 'ideaIC'
        exclude group:'org.jetbrains.plugins', module: 'junit'
        exclude group:'org.jetbrains.plugins', module: 'properties'
        exclude group:'org.jetbrains.plugins', module: 'Groovy'
    }
    compile(project(':testme-intellij-scala')){
        exclude group:'com.jetbrains', module: 'ideaIC'
        exclude group:'org.jetbrains.plugins', module: 'junit'
        exclude group:'org.jetbrains.plugins', module: 'properties'
        exclude group:'org.jetbrains.plugins', module: 'Groovy'
        exclude group:'org.jetbrains.plugins', module: 'Scala'
    }

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testCompile 'junit:junit:4.12'
    testCompile("org.spockframework:spock-core:$spockVersion"){
//        exclude group: 'org.codehaus.groovy'
    }
//    testCompileOnly group: 'org.scala-lang', name: 'scala-library', version: '2.10.6'
    testCompileOnly group: 'org.scala-lang', name: 'scala-library', version: '2.11.12'
}
def javadocHeader = ""
check.dependsOn integrationTest
integrationTest.mustRunAfter test
tasks.build.dependsOn(jacocoTestReport)
coveralls {
    sourceDirs = inspectedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}
tasks.coveralls {
//    group = 'Coverage reports'
//    description = 'Uploads the aggregated coverage report to Coveralls'
dependsOn jacocoRootReport
    onlyIf { isRunInCI}
}
task templateContextJavadocs(type: Javadoc, description: 'Generate javadocs for template context', group: 'Documentation') {
    dependsOn delombok
//    failOnError = false
    destinationDir = file("$buildDir/docs/templateContextJavadoc")
    title = "$project.name $version API"
    options.author true
    options.links 'http://docs.oracle.com/javase/8/docs/api/'
    options.addStringOption 'Xdoclint:none', '-quiet'
    options.addBooleanOption "-allow-script-in-comments", true
    options.header  = javadocHeader
//    source = sourceSets.main.allJava
    source += delombok
    classpath = configurations.compile
    include 'com/weirddev/testme/intellij/template/context/*'
    exclude 'com/weirddev/testme/intellij/template/context/impl*'

}
task allJavadocs(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'Documentation') {
    dependsOn delombok
//    failOnError = false
    destinationDir = file("$buildDir/docs/allJavadoc")
    title = "$project.name $version API"
    options.author true
    options.links 'http://docs.oracle.com/javase/8/docs/api/'
    options.addBooleanOption "-allow-script-in-comments", true
    options.header  = javadocHeader
    options.addStringOption 'Xdoclint:none', '-quiet'
    (subprojects+project).each { proj ->
        proj.tasks.withType(Javadoc).each { javadocTask ->
        source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += "**/*.form"
            excludes += "**/*.flex"
        }
    }
}